["function _08b8563849a2f0fd9e9faaf628f684171d11ec06(){};function _44d35595e9687c57a8de5707915a60eb457bfe",48,1048473,1048521,1048576,2099934,93,2097190,297709,"Ext.define('Ext.ux.picker.DateTim",2229553,55,"time",2195423,39,"ux.DateTimePick",1964879,48,2229919,65,974816,43,2230133,54,"yearTo",2230220,46,"\n         * @default the current year (new Date().getFullYear())",974816,43,2230415,186,"(Ext.os.deviceType.toLowerCase() == \"phone\") ? 'M' : 'Month",848912,41,"day",2230492,42,"day",2230539,51,"dayText: (Ext.os.deviceType.toLowerCase() == \"phone\") ? 'j' : 'Day",848912,41,"year",2230492,42,2230847,65,"(Ext.os.deviceType.toLowerCase() == \"phone\") ? 'Y' : 'Year',\r\n        /**\n        * @cfg {String} hourText\n",2230811,36,"hour column. Defaults to 'Hour'.\n        */\r\n        hourText: (Ext.os.deviceType.toLowerCase() == \"phone\") ? 'H' : 'Hour",848912,41,"minute",2230492,43,"inute column. Defaults to 'Minute'.\n         */\r\n        minuteText: (Ext.os.deviceType.toLowerCase() == \"phone\") ? 'i' : 'Minut",1229584,42,"ampm",2230492,42,"ampm column. Defaults to 'AM/PM'.\n         */\r\n        ampmText: (Ext.os.deviceType.toLowerCase() == \"phone\") ? 'A' : 'AM/PM",1958048,40,2230957,196,",\r\n",2493734,33,"'minute',\r\n            'ampm",2231152,44,"Int} minuteInterva",1267872,44,"minuteInterval: 1",1795360,33,"Boolean} ampm",1245920,44,"mpm: false",1185375,35,2246349,256,"s:\n         *",2246606,46,".\n         * new Date()",2231552,54,2343375,38,2197057,156,2197244,45,2342192,44,2232272,188,2232553,93,"ampm = 'AM';\r\n            currentHours = hour = value.getHours();\r\n            if (this.getAmpm()",828310,32,"Hours > 12) {\r\n                    ampm = \"PM\";\r\n                    hour -= 12",31818,37,"Hours == 12) {\r\n                    ampm = \"PM\"",31818,37,"Hours == 0) {\r\n                    hour = 12",61024,49,2232646,137,",\r\n                hour: hour,\r\n                minute: value.getMinutes(),\r\n                ampm: ampm",110320,37,2232820,78,2218126,44,"values = {}",2233063,33,"hour, minute",2208573,109,779664,40,2233167,125,874080,38,2233760,34,"values.month, values.year);\r\n        day = Math.min(values.day, daysInMonth) , hour = values.hour , minute = values.minute;\r\n        var yearval = (isNaN(values.year)) ? new Date().getFullYear() : values.year,\r\n            monthval = (isNaN(values.month)) ? (new Date().getMonth()) : (values.month - 1),\r\n            dayval = (isNaN(day)) ? (new Date().getDate()) : day,\r\n            hourval = (isNaN(hour)) ? new Date().getHours() : hour,\r\n            minuteval = (isNaN(minute)) ? new Date().getMinutes() : minute;\r\n        if (values.ampm && values.ampm == \"PM\" && hourval < 12) {\r\n            hourval = hourval + 12;\r\n        }\r\n        if (values.ampm && values.ampm == \"AM\" && hourval == 12) {\r\n            hourval = 0",578366,33,"Date(yearval, monthval, dayval, hourval, minuteval",1257696,39,2233968,1005,"dayText configuraton",2235004,1489,"this",2236495,187,"hours = [],\r\n            minutes = [],\r\n            ampm = [],\r\n            ln, tmp, i, daysInMonth;\r\n        if (!this.getAmpm()) {\r\n            var index = slotOrder.indexOf('ampm",1170347,52,"slotOrder.splice(index",874080,38,"// swap values if user mixes them up.\r\n        if (yearsFrom > yearsTo) {\r\n            tmp = yearsFrom;\r\n            yearsFrom = yearsTo;\r\n            yearsTo = tmp;\r\n        }\r\n        for (i = yearsFrom; i <= yearsTo; i++",2236771,53,"i,\r\n                value: i",531232,38,2233760,34,2237144,308,"(Ext.os.deviceType.toLowerCase() == \"phone\") ? Ext.Date.monthNames[i].substring(0, 3) ",2237450,97,"hourLimit = (this.getAmpm()) ? 12 : 23;\r\n        var hourStart = (this.getAmpm()) ? 1 : 0;\r\n        for (i = hourStart; i <= hourLimit; i++) {\r\n            hour",2239215,32,"this.pad2(i),\r\n                value: i",1152464,39,"or (i = 0; i < 60; i += this.getMinuteInterval()) {\r\n            minute",2239215,32,"this.pad2(i),\r\n                value: i",531232,38,"ampm.push({\r\n            text: 'AM',\r\n            value: 'AM'\r\n        }, {\r\n            text: 'PM',\r\n            value: 'PM'\r\n        });",2237533,94,"this",2237629,37,", hours, minutes, ampm",1310901,32,2237692,163,", hours, minutes, ampm",2237855,144,"(Ext.os.deviceType.toLowerCase() == \"phone\") ? 'left' ",2237997,121,"(Ext.os.deviceType.toLowerCase() == \"phone\") ? 1.3 : 3",6736,34,2238153,101,"(Ext.os.deviceType.toLowerCase() == \"phone\") ? 'left' ",2539408,32,2238284,90,"(Ext.os.deviceType.toLowerCase() == \"phone\") ? 1.2 : 4",6736,34,2238409,100,"(Ext.os.deviceType.toLowerCase() == \"phone\") ? 'left' ",2237997,39,"day",2238295,39,2238588,38,"(Ext.os.deviceType.toLowerCase() == \"phone\") ? 0.9 ",2238624,33,"    case 'hour':\r\n    ",986477,38,"    name: 'hou",2237967,32,"(Ext.os.deviceType.toLowerCase() == \"phone\") ? 'left' ",2237997,39,"hour",2238295,39,"Hour",2238591,35,"(Ext.os.deviceType.toLowerCase() == \"phone\") ? 0.9 ",2238624,33,"    case 'minute':\r\n    ",986477,38,"    name: 'minute',\r\n                    align: (Ext.os.deviceType.toLowerCase() == \"phone\") ? 'left' ",2237997,39,"minute",2238295,40,"inute",2238591,35,"(Ext.os.deviceType.toLowerCase() == \"phone\") ? 0.9 ",2238624,33,"    case 'ampm':\r\n    ",986477,38,"    name: 'ampm',\r\n                    align: (Ext.os.deviceType.toLowerCase() == \"phone\") ? 'left' ",2237997,39,"ampm",2238296,38,"Ampm",2238591,35,"(Ext.os.deviceType.toLowerCase() == \"phone\") ? 1.1 ",2238624,69,"pickedSlot, oldValue, htmlNode, eOpts) {\r\n        // We don't actually get passed the new value. I think this is an ST2 bug. Instead we get passed the slot,\r\n        // the oldValue, the node in the slot which was moved to, and options for the event.\r\n        //\r\n        // However looking at the code that fires the slotpick event, the slot.selectedIndex is always set there\r\n        // We can therefore use this to pull the underlying value that was picked out of the slot's store\r\n        var pickedValue = pickedSlot.getStore().getAt(pickedSlot.selectedIndex).get(pickedSlot.getValueField());\r\n        pickedSlot.setValue(pickedValue);\r\n        if (pickedSlot.getName() === 'month' || pickedSlot.getName() === 'year') {\r\n            this.repopulateDaySlot();\r\n        }\r\n    },\r\n    repopulateDay",998110,33,2238753,38,"days = [],\r\n            month = this.getSlotByName('month').getValue(),\r\n            year = this.getSlotByName('year').getValue(),\r\n            daysInMonth;\r\n        // G",2239046,95,2239145,185,2239331,74,"Data().length",2239423,65,"setData(days);\r\n    },\r\n    getSlotB",1639374,33,"return this.down('pickerslot[name=' + name + ']'",2240030,50,"return this.getSlotByName('day'",1257920,33,2240528,575,"pad2: function(number) {\r\n        return (number < 10 ? '0' : '') + number",893648,37,2241654,65,"ux.picker.DateTim",2241729,90,"ux.picker.DateTim",2241829,123,"ux.field.DateTim",2241961,99,"ux.field.DateTim",2242069,189,"ux.field.DateTim",2242267,440,"timepick",2255904,45,2244428,308,1110666,44,1235311,35,"set",2245182,96,"timepickerf",2244877,37,"tim",2243285,259,"timepickerf",2243551,465,"ux.field.DateTim",2244025,354,"timepick",2255904,45,2244428,442,"timepickerf",2244877,37,"tim",2245321,74,"timepickerfield.get",2245419,63,",",2243039,104,2245170,108,"timepickerf",2244877,37,"tim",2245321,74,"timepickerf",2245402,170,"ux.field.DateTim",2245581,35,"Text",1267311,37,"DateTimePicker',\r\n",2493586,39,2245708,81,"ux.field.DateTim",2245798,35,"date The new date",1280848,33,2245928,55,"ux.picker.DateTim",2245993,82,"ux.picker.DateTim",2246085,48,"ux.picker.DateTime}\n         * Defaults to tru",1113200,44,2246189,246,"ux.picker.DateTim",2246445,500," Defaults to fals",1113200,44,2246988,66,"dateTimeFormat",2247100,96,"tim",2247195,85," Defaults to `",2249056,33,"`.\n         */\r\n        dateTimeFormat: 'm/d/Y h:i:A",848912,33,2247339,144,568733,33,1282667,59,2247629,43,"this.getComponent()",2247774,33,2247818,142,"value =",2247966,67,"value =",2248039,48,", value.hour, value.minute",1770560,35,2217901,45,2252627,102,2248301,121,2248987,45,"newValue, this.getDateTim",2249975,47,1068816,39,2248568,53,2249344,44,"ux.picker.DateTime) {\r\n            this._picker",1283776,37,2248723,247," && ",2249344,44,"ux.picker.DateTime",2259646,37,2249007,196,"ed date",2249254,134,"ux.picker.DateTim",2249398,360,2249759,43,2249803,99,"console.log(this.getDateTimeFormat(), \"format\"",2249890,86,"Tim",2249975,467,"ux.picker.DateTime);\r\n    ",2250558,33,803311,34,"cancel: 'onPickerCancel',\r\n    ",2250605,51,2250652,34,"    });\r\n",137195,51,2250507,48,2221367,43,2250699,32,2250216,39,2250759,266,2252449,78,"getPicker().show(",301552,33,934720,33,"Revert internal date so field won't appear changed\n     */\r\n    onPickerCancel: function(picker, options) {\r\n        this._picker = this._picker.config;\r\n",2252012,35,"return",1480330,32,2251089,39,"\n     * @param {Ext.ux.picker.DateTime} picker The date picker",572959,34,"new value from the date picker",2376927,32,2222453,62,";\r\n        //var",2251358,61,"},\r\n    // me.fireEvent('change', me, value,oldValue);\r\n    //",2223162,40,");",2251682,77,"ux.field.DateTim",2251768,59,"true",2376927,32,2251866,38,"picker = this.getPicker();\r\n        if (this",2251968,83,"this._picker =",2252095,108,2252592,66,"getPicker()",2248237,64,2252729,81,"This is a specialized component which displays a Time Picker on the screen, allowing for the selection of a time (down to milliseconds)\n *",2228305,50,2228358,43," ## Examples\n *\n *     @example\n *     var timePicker = Ext.create('Ext.ux.picker.Time');\n *     Ext.Viewport.add( timePicker );\n *     timePicker.show();\n *     \n * You can add up to 5 slots: hours, minutes, seconds, milliseconds, meridien\n * \n *     @example\n *     var timePicker = Ext.create('Ext.ux.picker.Time',{\n *         slotOrder: ['hours','minutes','seconds','milliseconds','meridien']",1214318,36," timePicker );\n *     timePicker.show();\n *     \n * You can set custom value lists\n * \n *     @example\n *     var timePicker = Ext.create('Ext.ux.picker.Time',{\n *         hourList: [3,5,8,9,10]",1214318,36," timePicker );\n *     timePicker.show();\n * \n * You can set custom start and end values for each slot, as well as custom increments\n * \n *     \n *     @example\n *     var timePicker = Ext.create('Ext.ux.picker.Time',{\n *         startHour: 8,\n *         endHour: 18,\n *         increment:2",1214318,36," timePicker );\n *     timePicker.show();     \n *     \n */\r\nExt.define('Ext.ux.picker.Tim",2229553,51,"time",2195423,39,"TimePick",1964879,48," {String} hour",2230492,42,"hour",2230539,51,"hourText: 'Hour",848912,41,"minute",2230492,43,"inute",2230539,52,"inuteText: 'Minut",1229584,42,"second",2230492,42,"seconds",2230539,51,"secondText: 'Seconds",848912,41,"millisecond",2230492,43,"illisecond",2230539,52,"illisecondText: 'Milliseconds",848912,41,"meridiem",2230492,43,"eridiem",2230539,52,"eridiemText: 'AM/PM",848912,41,"AMText\n         * The text to use for the ante-meridi",1983039,46,"AMText: 'AM",848912,41,"PMText\n         * The text to use for the post-meridi",1983039,46,"PMText: 'PM",848912,33,"Number} startHour\n         * The start hour for the time picker. If meridiem is specified in the {@link #slotOrder}, \n         * {@link #startHour} will be set to 0 (for midnight) if this value is not set at config tim",1113200,44,"startHour",1176943,35,"Number} endHour\n         * The end hour for the time picker. If {@link #endHour} is greater than 12, \n         * meridiem slot will be ignor",1794176,45,"endHour: 12",1295520,40,"startMinute\n         * The start minute for the time picke",1237552,45,"startMinute",2198256,33," {Number} endMinute\n         * The end minute for the time picke",1237552,45,"endMinute: 5",1295519,41,"startSecond\n         * The start second for the time picke",1237552,45,"startSecond",2198256,33," {Number} endSecond\n         * The end second for the time picke",1237552,45,"endSecond: 5",1295519,41,"startMillisecond\n         * The start millisecond for the time picke",1237552,45,"startMillisecond",2198256,33," {Number} endMillisecond\n         * The end millisecond for the time picke",1237552,45,"endMillisecond: 999",1330560,39,"hourList\n         * Array of hours to use in the hour picker. If {@link #hourList} is defined, {@link #startHour},\n         * {@link #endHour} and {@link #hourIncrement} will be ignor",1794176,45,"hourLi",1474528,40,"Array} minuteList\n         * Array of minutes to use in the minute picker. If {@link #minuteList} is defined, {@link #startMinute},\n         * {@link #endMinute} and {@link #minuteIncrement} will be ignor",1794176,45,"minuteLi",1474528,40,"Array} secondList\n         * Array of seconds to use in the second picker. If {@link #secondList} is defined, {@link #startSecond},\n         * {@link #endSecond} and {@link #secondIncrement} will be ignor",1794176,45,"secondLi",1474528,40,"Array} millisecondList\n         * Array of milliseconds to use in the millisecond picker. If {@link #millisecondList} is defined, {@link #startMillisecond},\n         * {@link #endMillisecond} and {@link #millisecondIncrement} will be ignor",1794176,45,"millisecondLi",1474528,40,"Number} hourIncrement\n         * The increment value for hou",1237552,45,"hourIncrement",1176943,35,"Number} minuteIncrement\n         * The increment value for minu",1237696,46,"minuteIncrement: ",1795360,41,"secondIncrement\n         * The increment value for secon",1176080,45,"secondIncrement: ",1795360,41,"millisecondIncrement\n         * The increment value for millisecon",1176080,45,"millisecondIncrement: 100",1330560,39,"slotOrder\n         * The order of slots in the picker",1935600,44,"lotOrder: [\r\n",2493734,33,"'minute',\r\n            'meridiem'\r\n        ]",2515183,48,861184,32,1227904,41,2084284,36,"createSlots();",1254207,33,2191804,32,658943,34,"var useMeridiem = Ext.Array.contains(this.getSlotOrder(), 'meridiem');",2232632,41,"hour: useMeridiem && value.getHours() == 0 ? 12 : value.getHours(),\r\n                minute: value.getMinutes(),\r\n                second: value.getSeconds(),\r\n                millisecond: value.getMilliseconds(),\r\n                meridiem: value.getHours() >= 12 ? this.getPMText() : this.getAMText",1614208,39,2232820,78,2232926,154,"te = new Date(),\r\n            useMeridiem = Ext.Array.contains(this.getSlotOrder(), 'meridiem'),\r\n            hour, minute, second, millisecond, meridiem, item, i;\r\n        // get slot values",2032000,88,2233205,133," ",2233338,78,"hour",2233468,59,"// process hour\r\n        // make sure it's a number\r\n        if (Ext.isNumber(values.hour)) {\r\n            // if meridiem is active, need to smartly transform value\r\n            if (useMeridiem) {\r\n                // if PM is selected\r\n                if (values.meridiem == this.getPMText()) {\r\n                    hour = values.hour < 12 ? values.hour + 12 : values.hou",141680,35,"    if (values.meridiem == this.getAMText()) {\r\n                    hour = values.hour == 12 ? 0 : values.hou",141680,36," else {\r\n                hour = Ext.isNumber(values.hour) ? values.hour : 0",1410688,38,"inute = Ext.isNumber(values.minute) ? values.minute : 0;\r\n        second = Ext.isNumber(values.second) ? values.second : 0;\r\n        millisecond = Ext.isNumber(values.millisecond) ? values.millisecond : 0;\r\n        //meridiem = !Ext.isEmpty( values.meridiem ) ? values.meridiem : null;\r\n",643056,44,"date.getMonth(), date.getDate(), hour, minute, second, millisecond)",1616921,37,"ll slot",2236322,203,"ln, i,\r\n            slots = [];\r\n        // cleanup config\r\n        me.cleanupConfig();\r\n        // create array of slot data",2237558,58,"var slot = me.createSlot(item);",2208005,43,"slots.push(slot",326030,40,2237692,82,2357375,35,"createSlo",858684,33,"me = this;\r\n",409247,37,"case 'hour':\r\n    ",986477,38,"    name: 'hou",2237967,69,"me.getHourCollection(),\r\n                    title: me.getHour",2238591,35,"1",6736,34,"case 'minute':\r\n                // make sure \"use\" flag is on\r\n",299524,39,"me.getSlotOrder(), 'minute'",1732784,33,87839,33,"'minute',\r\n",2488420,66,"data: me.getMinuteCollec",2442846,33,"title: me.getMinuteText()",2564612,34,5693,43,469232,35,"    case 'second':\r\n                // make sure \"use\" flag is on\r\n",299524,39,"me.getSlotOrder(), 'minute') && Ext.Array.contains(me.getSlotOrder(), 'second'",1732784,33,87839,33,"'second',\r\n",2488420,66,"data: me.getSecondCollec",2442846,33,"title: me.getSecondText()",2564612,34,5693,43,469232,35,"    case 'millisecond':\r\n                // make sure \"use\" flag is on\r\n",299524,39,"me.getSlotOrder(), 'minute') && Ext.Array.contains(me.getSlotOrder(), 'second') && Ext.Array.contains(me.getSlotOrder(), 'millisecond'",1732784,33,87839,33,"'millisecond',\r\n",2488420,66,"data: me.getMillisecondCollec",2442846,33,"title: me.getMillisecondText()",2564612,34,5693,43,469232,35,"    case 'meridiem':\r\n                // make sure \"use\" flag is on, and that the end hour is less than 13\r\n",299524,39,"me.getSlotOrder(), 'meridiem') && me.getEndHour() <= 12",274752,32,87839,33,"'meridiem',\r\n",2488420,66,"data",2556608,68,"text: me.getAMText()",628848,35,"value: me.getAMText()\r\n        ",801883,44,1271776,39,"    text: me.getPMText()",628848,35,"value: me.getPMText()",94095,57,"]",2557359,34,"me.getMeridiemText()",2564612,34,5693,43,469232,42,"},\r\n    cleanup",1271438,34,"me = this,\r\n            shour = me.getStartHour(),\r\n            ehour = me.getEndHour(),\r\n            sminute = me.getStartMinute(),\r\n            eminute = me.getEndMinute(),\r\n            ssecond = me.getStartSecond(),\r\n            esecond = me.getEndSecond(),\r\n            smilli = me.getStartMillisecond(),\r\n            emilli = me.getEndMillisecond(),\r\n            useMeridiem = Ext.Array.contains(me.getSlotOrder(), 'meridiem');\r\n        // evaluate user config\r\n        shour = shour < 1 || !Ext.isNumber(shour) ? useMeridiem ? 1 : 0 : shour;\r\n        ehour = ehour > 23 || !Ext.isNumber(ehour) ? Ext.Array.contains(me.getSlotOrder(), 'meridiem') ? 12 : 23 : ehour;\r\n        sminute = sminute < 0 || !Ext.isNumber(sminute) ? 0 : sminute;\r\n        eminute = eminute > 59 || !Ext.isNumber(eminute) ? 59 : eminute;\r\n        ssecond = ssecond < 1 || !Ext.isNumber(ssecond) ? 0 : ssecond;\r\n        esecond = eminute > 59 || !Ext.isNumber(esecond) ? 59 : esecond;\r\n        smilli = smilli < 1 || !Ext.isNumber(smilli) ? 0 : smilli;\r\n        emilli = emilli > 59 || !Ext.isNumber(emilli) ? 999 : emilli;\r\n        // set values\r\n        me.setStartHour(shour);\r\n        me.setEndHour(ehour);\r\n        me.setStartMinute(sminute);\r\n        me.setEndMinute(eminute);\r\n        me.setStartSecond(ssecond);\r\n        me.setEndSecond(esecond);\r\n        me.setStartMillisecond(smilli);\r\n        me.setEndMillisecond(emilli);\r\n    },\r\n    getHourCol",1890255,59,"hours = [];\r\n        // compile collection of hour values\r\n        // if an hour list is defined\r\n        if (!!me.getHourList()) {\r\n            var list = me.getHourList()",288448,32,"ist",2015103,33,"// ensure that hour is not greater than 23...otherwise, it will create an invalid date\r\n                if (i < 24) {\r\n                    hour",86991,34,"text: list[i]",87876,34,"list[i]",6010,58,"}\r\n        } else // otherwise, increment between start and end hour by increment setting\r\n        {\r\n            for (i = me.getStartHour(); i <= me.getEndHour(); i += me.getHourIncrement()) {\r\n                hours.push({\r\n                    text: i,\r\n                    value: i",45392,35,"}\r\n        }\r\n        return hours;\r\n    },\r\n    getMinuteCol",1890255,59,"minutes = [];\r\n        // compile collection of minute values\r\n        // if a minute list is defined\r\n        if (!!me.getMinuteList()) {\r\n            var list = me.getMinuteList()",288448,32,"ist",2015103,33,"minutes.push({\r\n                    text: list[i] < 10 ? '0' + list[i] : list[i],\r\n                    value: list",1961647,50," else // otherwise, increment minutes automatically by increment setting\r\n        {\r\n            for (i = me.getStartMinute(); i <= me.getEndMinute(); i += me.getMinuteIncrement()) {\r\n                minutes.push({\r\n                    text: i < 10 ? '0' + i : i,\r\n                    value: i",45392,35,"}\r\n        }\r\n        return minutes;\r\n    },\r\n    getSecondCol",1890255,61,"conds = [];\r\n        // compile collection of second values\r\n        // if a second list is defined\r\n        if (!!me.getSecondList()) {\r\n            var list = me.getSecondList()",288448,32,"ist",2015103,33,"// ensure that second is not greater than 59...otherwise, it will create an invalid date\r\n                if (i < 60) {\r\n                    second",86991,34,"text: list[i] < 10 ? '0' + list[i] : list[i]",87876,34,"list[i]",6010,58,"}\r\n        } else // otherwise, increment seconds automatically by increment setting\r\n        {\r\n            for (i = me.getStartSecond(); i <= me.getEndSecond(); i += me.getSecondIncrement()) {\r\n                seconds.push({\r\n                    text: i < 10 ? '0' + i : i,\r\n                    value: i",45392,35,"}\r\n        }\r\n        return seconds;\r\n    },\r\n    getMillisecondCol",1890255,59,"milliseconds = [];\r\n        // compile collection of milliseconds values\r\n        // if a millisecond list is defined\r\n        if (!!me.getMillisecondList()) {\r\n            var list = me.getMillisecondList()",288448,32,"ist",2015103,33,"// ensure that millisecond is not greater than 999...otherwise, it will create an invalid date\r\n                if (i < 1000) {\r\n                    millisecond",86991,34,"text: list[i] < 10 ? '0' + list[i] : list[i]",87876,34,"list[i]",6010,58,"}\r\n        } else // otherwise, increment milliseconds automatically by increment setting\r\n        {\r\n            for (i = me.getStartMillisecond(); i <= me.getEndMillisecond(); i += me.getMillisecondIncrement()) {\r\n                milliseconds.push({\r\n                    text: i < 10 ? '0' + i : i,\r\n                    value: i",45392,35,"}\r\n        }\r\n        return milliseconds",1213821,35,2241677,49,"Tim",2241729,90,"ux.picker.Tim",2241829,103,2242158,296,2244144,231,"timepick",2255904,45,"Start Time",2242764,37,"starttime",2244481,110,1657242,46,"ux.field.Tim",2245581,35,"DatePicke",1267310,38,"TimePicker',\r\n    xtype: 'timepicker",2254671,51,2247044,259,"'h:i A",848912,41,"default time\n         * The default time to be used when initilizing the field\n         * Example: '8:00', '14:50'\n         */\r\n        defaultTime: '8:00'",2259976,57,"date = new Date();",569321,32," whatsoever, set a default",658928,32,2247919,41,"var defaultTime = this.getDefaultTime().split(':');",639182,38,636484,39,", defaultTime[0], defaultTime[1]",1158735,33,"value is an object, create a new date with time values based on object",2247983,66,"date.get",636484,39,", value.hour, value.minute",1770560,35,2250030,72,"picker = Ext.factory(picker, 'Ext.ux.picker.Time');\r\n        picker.setHidden(true);\r\n",2221363,43,2250731,40,2247041,102,"time in this field.\n     * Accepts any valid date/tim",2247195,80,"*/",2218128,38,2249340,48,"ux.picker.Tim",2249398,103,2250255,187,"ux.picker.Tim",2250452,114,"// add listeners",2250556,196,"\r\n",2394892,98706,"tim",2477913,32,"picker: {\r\n                    startHour: 0,\r\n                    endHour: 24,\r\n                    useMeridiem: false,",2493646,187,"//ampm ",2493837,93,2492919,34,"{\r\n       ",2263494,34,"picker",2289760,40,2515263,32,"onStartChang",2299760,77,2493948,60,"dat",2493975,295,"tim",2477913,32,2493637,371,"dat",2494647,2828,2497627,629,"formpanel1",2480655,50,2490768,37,2463194,32,"current",2463232,521,"current",2463759,56,"current",2463821,32,2499594,13311,",\r\n    onStartChang",2273807,49,2509693,32,"endTimeFld = form.down(\"#end-time\");\r\n        //var ndt ",2498572,33,"\"H:i\");\r\n",2498623,45,"ewValue, Ext.Date.HOUR, 1);\r\n",2498700,46,2518608,37,2512941,65833,"5",2578775,10979]